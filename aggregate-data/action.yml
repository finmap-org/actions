name: Aggregate
description: Composite Github Action

inputs:
  repo:
    required: true
  start_date:
    description: 'Start date, YYYY/MM/DD'
    required: true
  end_date:
    description: 'End date, YYYY/MM/DD'
    required: true

runs:
  using: "composite"
  steps:
    - name: Read Inputs
      shell: bash
      run: |
        # Convert input dates into YYYY/MM/DD
        START_DATE=$(date -d "${{ inputs.start_date }}" +%Y/%m/%d)
        END_DATE=$(date -d "${{ inputs.end_date }}" +%Y/%m/%d)
        echo "START_DATE=$START_DATE" >> $GITHUB_ENV
        echo "END_DATE=$END_DATE" >> $GITHUB_ENV

        REPO="${{ inputs.repo }}"
        echo "REPO=$REPO" >> $GITHUB_ENV

    - name: Calculate sector aggregates
      shell: bash
      run: |
        set -euo pipefail

        TMP="$(mktemp)"
        trap 'rm -f "$TMP"' EXIT

        function sector_sum() {
          local data_dir="$1"
          local exchange="$2"
          local currency="$3"

          jq --arg exchange "$exchange" \
             --arg currency "$currency" \
           'def current_total(g): g | map(.[17]) | add;
            def prev_total(g): g | map(.[17] / (1 + (.[13] // 0) / 100)) | add;
            def pct(g): if prev_total(g) == 0 then 0 else ((current_total(g) - prev_total(g)) / prev_total(g) * 100) end;
            .securities.data += (.securities.data | group_by(.[3]) | map(
              [
                "",
                "",
                "sector",
                $exchange,
                "",
                $currency,
                .[0][3],
                .[0][3],
                "",
                "",
                "",
                0,
                0,
                pct(.),
                (map(.[14]) | add),
                (map(.[15]) | add),
                (map(.[16]) | add),
                current_total(.),
                "",
                "",
                "",
                "",
                length
              ]
            ))' "${data_dir}/${exchange}.json" > "$TMP" && mv "$TMP" "${data_dir}/${exchange}.json"
        }

        function market_totals() {
          local data_dir="$1"
          local exchange="$2"
          local currency="$3"
          
          jq --arg exchange "$exchange" \
             --arg currency "$currency" \
            'def securities: .securities.data | map(select(.[2] != "sector"));
             def total_current: securities | map(.[17]) | add;
             def total_prev: securities | map(.[17] / (1 + (.[13] // 0) / 100)) | add;
             def total_pct: if total_prev == 0 then 0 else ((total_current - total_prev) / total_prev * 100) end;
             .securities.data += [
               [
                 "",
                 "",
                 "sector",
                 "",
                 "",
                 $currency,
                 $exchange,
                 $exchange,
                 "",
                 "",
                 "",
                 0,
                 0,
                 total_pct,
                 (securities | map(.[14]) | add),
                 (securities | map(.[15]) | add),
                 (securities | map(.[16]) | add),
                 total_current,
                 "",
                 "",
                 "",
                 "",
                 (securities | length)
               ]
             ]' "${data_dir}/${exchange}.json" > "$TMP" && mv "$TMP" "${data_dir}/${exchange}.json"
        }

        function aggregate() {
          local current_date="$1"
          local data_dir="${{ github.workspace }}/${REPO}/marketdata/${current_date}"

          if [ "$REPO" = "data-us" ]; then
            for file in $data_dir/*.json; do
              exchange=$(basename "$file" .json);
              currency="USD"
              sector_sum "$data_dir" "$exchange" "$currency"
              market_totals "$data_dir" "$exchange" "$currency"
            done
          else
            case "$REPO" in
              "data-hongkong")
                exchange="Hong Kong Exchange"
                currency="HKD"
                ;;
              "data-lse")
                exchange="London Stock Exchange"
                currency="GBP"
                ;;
              "data-russia")
                exchange="Moscow Exchange"
                currency="RUB"
                ;;
              "data-turkey")
                exchange="Borsa Istanbul"
                currency="TRY"
                ;;
            esac
            sector_sum "$data_dir" "$exchange" "$currency"
            market_totals "$data_dir" "$exchange" "$currency"
          fi
        }

        # Convert dates to seconds since epoch for comparison
        start_seconds=$(date -d "$START_DATE" +%s)
        end_seconds=$(date -d "$END_DATE" +%s)
        
        # Loop through the date range
        current_seconds=$start_seconds
        while [ $current_seconds -le $end_seconds ]; do
          current_date=$(date -d "@$current_seconds" +"%Y-%m-%d")
          # Increment the current date by one day (86400 seconds)
          current_seconds=$((current_seconds + 86400))
        
          # Skip weekends
          if [ $(date -d "$current_date" +%u) -ge 6 ]; then
            continue
          fi

          aggregate "$current_date"
        done
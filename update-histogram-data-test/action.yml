name: Update Histogram Datafiles
description: Composite GitHub Action

inputs:
  repo:
    description: "Repository path relative to workspace"
    required: true
  start_date:
    description: "Start date, YYYY/MM/DD"
    required: true
  end_date:
    description: "End date, YYYY/MM/DD"
    required: true
  max_jobs:
    description: "Maximum concurrent date workers"
    required: false
    default: "10"

runs:
  using: composite
  steps:
    - name: Read inputs
      shell: bash
      run: |
        REPO="${{ inputs.repo }}"
        START_DATE=$(date -d "${{ inputs.start_date }}" +%Y/%m/%d)
        END_DATE=$(date -d "${{ inputs.end_date }}" +%Y/%m/%d)
        MAX_JOBS="${{ inputs.max_jobs }}"
        echo "REPO=$REPO" >> "$GITHUB_ENV"
        echo "START_DATE=$START_DATE" >> "$GITHUB_ENV"
        echo "END_DATE=$END_DATE" >> "$GITHUB_ENV"
        echo "MAX_JOBS=${MAX_JOBS:-10}" >> "$GITHUB_ENV"

    - name: Update Histogram Datafiles
      shell: bash
      run: |
        set -euo pipefail

        # Enable nullglob so that if no *.json files exist in "$data_dir/*.json",
        # the glob expands to an empty list and the loop is skipped instead of
        # processing the literal pattern string
        shopt -s nullglob

        REPO="${REPO:?}"
        START_DATE="${START_DATE:?}"
        END_DATE="${END_DATE:?}"
        MAX_JOBS="${MAX_JOBS:-10}"
        WORKSPACE="${{ github.workspace }}"
        MARKETDATA_ROOT="$WORKSPACE/$REPO/marketdata"
        HISTORY_DIR="$WORKSPACE/$REPO/history"
        mkdir -p "$HISTORY_DIR"

        TMPDIR=$(mktemp -d)
        trap 'rm -rf "$TMPDIR"' EXIT

        start_seconds=$(date -d "$START_DATE" +%s)
        end_seconds=$(date -d "$END_DATE" +%s)
        current_seconds=$start_seconds

        process_date() {
          date_slash="$1"
          iso=$(date -d "$date_slash" +%Y-%m-%d)
          outdir="$TMPDIR/$iso"
          mkdir -p "$outdir"
          data_dir="$MARKETDATA_ROOT/$date_slash"
          [[ -d "$data_dir" ]] || return 0
          for file in "$data_dir"/*.json; do
            [[ -f "$file" ]] || continue
            exchange=$(basename "$file" .json)
            jq -c --arg d "$iso" '
              {
                dates: [$d]
              } + (reduce (.securities.data[]? | select(.[2]=="sector")) as $s ({}; . + { (if $s[3] != "" then $s[7] else "Market Totals" end): {
                volume: [($s[14] // 0)],
                value: [($s[15] // 0)],
                tradesNumber: [($s[16] // 0)],
                marketCap: [($s[17] // 0)],
                itemsNumber: [($s[23] // 0)]
              }}))
            ' "$file" > "$outdir/$exchange.json"
          done
        }

        export -f process_date

        while [ $current_seconds -le $end_seconds ]; do
          current_date=$(date -d "@$current_seconds" +"%Y/%m/%d")
          current_seconds=$((current_seconds + 86400))
          dow=$(date -d "$current_date" +%u)
          if [ "$dow" -ge 6 ]; then
            continue
          fi
          process_date "$current_date" &
          while [ "$(jobs -rp | wc -l)" -ge "$MAX_JOBS" ]; do
            wait -n
          done
        done

        wait

        find "$TMPDIR" -mindepth 2 -maxdepth 2 -type f -name '*.json' -printf '%f\n' | sed 's/\.json$//' | sort -u | while read -r exchange; do
          files=()
          if [ -f "$HISTORY_DIR/$exchange.json" ]; then
            files+=("$HISTORY_DIR/$exchange.json")
          fi
          for f in "$TMPDIR"/*/"$exchange".json; do
            [[ -f "$f" ]] || continue
            files+=("$f")
          done
          if [ ${#files[@]} -eq 0 ]; then
            continue
          fi
          tmp=$(mktemp)
          jq -s '
            reduce .[] as $item (
              {};
              .dates = ((.dates // []) + ($item.dates // [])) | unique | sort
              | ($item | keys_unsorted[] | select(. != "dates")) as $k
              | .[$k] = {
                  volume: ((.[$k].volume // []) + ($item[$k].volume // [])),
                  value: ((.[$k].value // []) + ($item[$k].value // [])),
                  tradesNumber: ((.[$k].tradesNumber // []) + ($item[$k].tradesNumber // [])),
                  marketCap: ((.[$k].marketCap // []) + ($item[$k].marketCap // [])),
                  itemsNumber: ((.[$k].itemsNumber // []) + ($item[$k].itemsNumber // []))
                }
            )
          ' "${files[@]}" > "$tmp"
          mv "$tmp" "$HISTORY_DIR/$exchange.json"
        done

        exit 0
